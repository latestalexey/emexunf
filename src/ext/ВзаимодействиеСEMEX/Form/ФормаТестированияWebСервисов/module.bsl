//-----------------------------------------------------------
//Процедуры работы с Web-сервисами
//-----------------------------------------------------------

Процедура ЗаполнитьТаблицуСервисов()
	
	Сервисы.Очистить();
	WSИмяСервиса="";
	
	мWSОпределение = ПолучитьWSОпределение(Модифицированность); 
	Если Не Неопределено = мWSОпределение Тогда
		Для каждого Сервис Из мWSОпределение.Сервисы Цикл
			Стр=Сервисы.Добавить();
			ЗаполнитьЗначенияСвойств(Стр,Сервис);
		КонецЦикла; 
		Если Сервисы.Количество()>0 Тогда
			ЭлементыФормы.Сервисы.ТекущаяСтрока = Сервисы[0];
			WSИмяСервиса=ЭлементыФормы.Сервисы.ТекущаяСтрока.Имя;
		КонецЕсли; 
	КонецЕсли; 
	Модифицированность=Ложь;
	
	ЗаполнитьТаблицуТочекПодключения();
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуТочекПодключения()
		
	ТочкиПодключения.Очистить();
	WSURIПространстваИмен="";
	WSИмяТочкиПодключения="";
	
	Если ЭлементыФормы.Сервисы.ТекущаяСтрока<>Неопределено Тогда
		WSСервис = ПолучитьWSСервис(Модифицированность);
		Если Неопределено = WSСервис Тогда
			Возврат;
		КонецЕсли; 
		
		WSURIПространстваИмен = WSСервис.URIПространстваИмен;
		
		Для каждого ТочкаПодключения Из WSСервис.ТочкиПодключения Цикл
			Стр = ТочкиПодключения.Добавить();
			ЗаполнитьЗначенияСвойств(Стр,ТочкаПодключения);
		КонецЦикла; 
		
		Если ТочкиПодключения.Количество()>0 Тогда
			ЭлементыФормы.ТочкиПодключения.ТекущаяСтрока = ТочкиПодключения[0];
			WSИмяТочкиПодключения=ЭлементыФормы.ТочкиПодключения.ТекущаяСтрока.Имя;
		КонецЕсли; 
	КонецЕсли; 
	
	ЗаполнитьТаблицуОпераций();	
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуОпераций()
	
	WSИнтерфейс = "";
	Операции.Очистить();
	
	Если ЭлементыФормы.ТочкиПодключения.ТекущаяСтрока<>Неопределено Тогда
		WSТочкаПодключения = ПолучитьWSТочкуПодключения(Модифицированность);
		Если Неопределено = WSТочкаПодключения Тогда
			Возврат;
		КонецЕсли; 
		
		WSИнтерфейс = WSТочкаПодключения.Интерфейс.Имя;
		
		Для каждого Операция Из WSТочкаПодключения.Интерфейс.Операции Цикл
			Стр = Операции.Добавить();
			ЗаполнитьЗначенияСвойств(Стр,Операция);
		КонецЦикла; 
		
		Если Операции.Количество()>0 Тогда
			Операции.Сортировать("Имя Возр");
			ЭлементыФормы.Операции.ТекущаяСтрока = Операции[0];
			WSИмяОперации=ЭлементыФормы.Операции.ТекущаяСтрока.Имя;
		КонецЕсли; 
	КонецЕсли; 
    	
	ЗаполнитьТаблицуПараметров();
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуПараметров()

	WSТипВозвращаемогоЗначения = "";
	WSВозвращаемоеЗначениеВозможноПустое = Ложь;
	WSТипВозвращаемогоЗначенияДокументация="";
	
	WSПараметры.Очистить();
	
	Если ЭлементыФормы.Операции.ТекущаяСтрока<>Неопределено Тогда
		WSОперация = ПолучитьWSОперацию(Модифицированность);	
		Если Неопределено = WSОперация Тогда
			Возврат;
		КонецЕсли; 
		WSТипВозвращаемогоЗначения = WSОперация.ВозвращаемоеЗначение.Тип;
		WSВозвращаемоеЗначениеВозможноПустое = WSОперация.ВозвращаемоеЗначение.ВозможноПустое;
		WSТипВозвращаемогоЗначенияДокументация= WSОперация.ВозвращаемоеЗначение.Документация;
		WSТаблицаПараметров = ПолучитьWSПараметры(Модифицированность);
		Если Неопределено = WSТаблицаПараметров Тогда
			Возврат;
		КонецЕсли; 
		ЭлементыФормы.WSПараметры.Значение.Загрузить(WSТаблицаПараметров);
	КонецЕсли; 
	
КонецПроцедуры

Процедура УстановитьТекстHTML(Текст)
	
	//МассивСтрок=РазборСтроки(Текст,"font-size");
	//Текст="";
	//Для каждого Зн из МассивСтрок цикл
	//	Если Найти(Зн,"font-size")=0 тогда
	//		Текст=Текст+Зн;
	//		Продолжить;
	//	КонецЕсли;
	//	ПозДвоеточия=Найти(Зн,":");
	//	ПозТочкиСЗапятой=Найти(Зн,";");
	//	Текст=Текст+Лев(Зн,ПозДвоеточия)+"11"+Прав(Зн,СтрДлина(Зн)-ПозТочкиСЗапятой);	
	//КонецЦикла;
	
	ЭлементыФормы.ПолеHTMLДокументация.УстановитьТекст(Текст);
	
КонецПроцедуры

Функция РазборСтроки(Строка,Символ)
     Длина = СтрДлина(Строка);     
     ЧислоВхождений = СтрЧислоВхождений(Строка,Символ);
     Массив = Новый Массив();
     для Индекс = 0 по ЧислоВхождений-1 цикл
         ПозицияПробела = Найти(Строка,Символ);
         Массив.Добавить(СокрП(Лев(Строка,ПозицияПробела)));
         Строка = СокрЛП(Сред(Строка,ПозицияПробела,Длина-1));
     конеццикла;     
     Массив.Добавить(Строка); 
     Возврат Массив;    
 КонецФункции
 
//-----------------------------------------------------------
//Процедуры работы с элементами форм
//-----------------------------------------------------------

Процедура ПриОткрытии()

	ПолеСпискаСервисы=WebСервисы;
	
КонецПроцедуры

Процедура ПолеСпискаСервисыПриАктивизацииСтроки(Элемент)

	WSURLWSDL="";	
	
	Если Элемент.ТекущаяСтрока=Неопределено тогда
		Возврат;
	КонецЕсли;
	
	WSURLWSDL=Элемент.ТекущаяСтрока.Значение;
	Если Не ЗначениеЗаполнено(WSURLWSDL) тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность=Истина;
	ЗаполнитьТаблицуСервисов();
	ЗаполнитьЗначенияТаблицыПараметоров();
	
КонецПроцедуры

Процедура КнопкаОбновитьОпределениеНажатие(Элемент)
	
	Если Не ЗначениеЗаполнено(WSURLWSDL) тогда
		Возврат;
	КонецЕсли;

	Модифицированность=Истина;
	ЗаполнитьТаблицуСервисов();
	ЗаполнитьЗначенияТаблицыПараметоров();	
	
КонецПроцедуры

Процедура СервисыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока=Неопределено тогда
		Возврат;
	КонецЕсли;
	
	WSИмяСервиса=ВыбраннаяСтрока.Имя;
	УстановитьТекстHTML(ВыбраннаяСтрока.Документация);
	ЗаполнитьТаблицуТочекПодключения();
		
КонецПроцедуры

Процедура ТочкиПодключенияВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока=Неопределено тогда
		Возврат;
	КонецЕсли;
	
	WSИмяТочкиПодключения=ВыбраннаяСтрока.Имя;	
	УстановитьТекстHTML(ВыбраннаяСтрока.Документация);
	ЗаполнитьТаблицуОпераций();

КонецПроцедуры

Процедура ОперацииВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока=Неопределено тогда
		Возврат;
	КонецЕсли;
	
	WSИмяОперации=ВыбраннаяСтрока.Имя;	
	УстановитьТекстHTML(ВыбраннаяСтрока.Документация);
	ЗаполнитьТаблицуПараметров();
	
	ЗаполнитьЗначенияТаблицыПараметоров();

КонецПроцедуры

Процедура WSПараметрыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока=Неопределено тогда
		Возврат;
	КонецЕсли;
		
	УстановитьТекстHTML(ВыбраннаяСтрока.Документация);
	
КонецПроцедуры

Процедура WSТипВозвращаемогоЗначенияОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	УстановитьТекстHTML(WSТипВозвращаемогоЗначенияДокументация);
	
КонецПроцедуры

Процедура WSПараметрыЗначениеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Список=ЭлементыФормы.WSПараметры.ТекущаяСтрока.ВозможныеЗначения;
	Если ЗначениеЗаполнено(Список) тогда
		Список= ЗначениеИзСтрокиВнутр(Список);                                   
		Элемент.СписокВыбора.ЗагрузитьЗначения(Список.ВыгрузитьЗначения());
	Иначе
		Элемент.СписокВыбора.Очистить();
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьЗначенияТаблицыПараметоров()
	
	Для каждого Стр из WSПараметры цикл
		
		Если Стр.Имя="login" тогда
			Если ТипЗнч(Стр.Значение)=Тип("Строка") тогда
				Стр.Значение=Логин;
			Иначе // число
				Попытка
					Стр.Значение=Число(Логин);
				Исключение
					Предупреждение("Неверный ""Логин"" ! Должен быть числовым.",1);	
				КонецПопытки;
			КонецЕсли;
		ИначеЕсли Стр.Имя="password" тогда
			Стр.Значение=Пароль;
		ИначеЕсли Стр.Имя="detailNum" тогда
			Стр.Значение="A133301070FA";
		ИначеЕсли WSИмяОперации="TestConnect" и Стр.Имя="s" тогда
			Стр.Значение="Test";
		КонецЕсли;
		
	конецЦикла;
	
КонецПроцедуры

Процедура ОсновныеДействияФормыОсновныеДействияФормыВыполнить(Кнопка)
	
	Попытка
				
		WSОпределение = Новый WSОпределения(WSURLWSDL, Логин, Пароль);
		WSПрокси = Новый WSПрокси(WSОпределение, WSURIПространстваИмен, WSИмяСервиса, WSИмяТочкиПодключения);
		WSПрокси.Пользователь = Логин;
		WSПрокси.Пароль = Пароль;
		
		СтрокаПараметров = "";
		Если Не ЗаполнитьСписокWSПараметров(WSПрокси, СтрокаПараметров) Тогда
			Возврат;
		КонецЕсли;
		
		ВозвращаемоеЗначение = ВыполнитьWSОперацию(WSПрокси, СтрокаПараметров);
		Если Не WSВозвращаемоеЗначениеВозможноПустое И Неопределено = ВозвращаемоеЗначение Тогда
			СообщитьОбОшибке("Ошибка выполнения операции!");
			Возврат;
		КонецЕсли; 
		
		Если ТипЗнч(ВозвращаемоеЗначение) = Тип("ОбъектXDTO") Тогда
			
			Сериализатор = Новый СериализаторXDTO(WSПрокси.ФабрикаXDTO);
			Запись = Новый ЗаписьXML;
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".xml");
			Запись.ОткрытьФайл(ИмяВременногоФайла);
			Сериализатор.Фабрика.ЗаписатьXML(Запись, ВозвращаемоеЗначение);			
			
			Запись.Закрыть();
			
			Текст = Новый ТекстовыйДокумент;
			Текст.Прочитать(ИмяВременногоФайла);
			
			ЭлементыФормы.ДокументРезультат.УстановитьТекст(Текст.ПолучитьТекст());
			//-------------------------
			//ВыбранныеПакеты = Новый Массив;
			//Для Каждого Пакет Из Сериализатор.Фабрика.Пакеты Цикл
			//	ВыбранныеПакеты.Добавить(Пакет.URIПространстваИмен);
			//КонецЦикла;
			//
			//Объект = Сериализатор.Фабрика.ЭкспортМоделиXDTO(ВыбранныеПакеты);
			//
			//Запись = Новый ЗаписьXML;
			//Запись.ОткрытьФайл("D:\1cv82\Emex\auto.xsd");
			//
			//Сериализатор.Фабрика.ЗаписатьXML(Запись,Объект,,,,НазначениеТипаXML.Неявное);
			//
			//Запись.Закрыть();
					
			

			
			
			
			
			
			//ЧтениеXML = Новый ЧтениеXML;			
			//ЧтениеXML.ОткрытьФайл("D:\1cv82\Emex\Тест.xml");
			//
			//Схемы = Новый Массив;
			//Схемы.Добавить("D:\1cv82\Emex\СхемаПоискДетали_1.xsd");
			//Схемы.Добавить("D:\1cv82\Emex\СхемаПоискДетали_2.xsd");

			//МояФабрика = СоздатьФабрикуXDTO(Схемы);
			//МойСериализатор = Новый СериализаторXDTO(МояФабрика);
			//Документ1 = МойСериализатор.ПрочитатьXDTO(ВозвращаемоеЗначение);
			
			
			//ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			//Сериализатор=Новый СериализаторXDTO(ФабрикаXDTO);
			//МойСписокЗначений2=Сериализатор.ПрочитатьXDTO(ОбъектXDTO);
			
			//Для каждого ЭлементСписка из Список.Details Цикл
			//	ф=ТипЗнч(ЭлементСписка);
			//КонецЦикла;	
			
			//ПостроительDOM=Новый ПостроительDOM;
			//ДокументDOM=ПостроительDOM.Прочитать(ЧтениеXML);			
			//Результат= ДокументDOM.ПолучитьЭлементыПоИмени("SoapDetailItem");			
			//Для Каждого Эл из Результат цикл								
			//	Для Каждого Узел из Эл.ДочерниеУзлы цикл   
			//		Колонка=XMLЗначение(Тип("Строка"),Узел.ИмяУзла);
			//		Значение=XMLЗначение(Тип("Строка"),Узел.ТекстовоеСодержимое);
			//	КонецЦикла ;
			//КонецЦикла;
			//
			//ЧтениеXML.Закрыть();
			
			//ЧтениеXML = Новый ЧтениеXML;
			//   ЧтениеXML.УстановитьСтроку(ПолучитьМакет("Модель").ПолучитьТекст());
			//   ОбъектModel = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			//   НоваяФабрикаXDTO = Новый ФабрикаXDTO(ОбъектModel);
			//   
			//   Для Каждого Пакет из НоваяФабрикаXDTO.Пакеты Цикл
			//	  ТипXDTO = Пакет.Получить("NewDataSet");
			//Если ТипЗнч(ТипXDTO) <> Неопределено Тогда
			//	СписокНоменклатуры = НоваяФабрикаXDTO.Создать(ТипXDTO);
			//КонецЕсли;
			//КонецЦикла;
			
			
			
			
			//-------------------------------
			УдалитьФайлы(ИмяВременногоФайла);
						
		Иначе
			ЭлементыФормы.ДокументРезультат.УстановитьТекст(ВозвращаемоеЗначение);
		КонецЕсли; 
		
		Элементыформы.ПанельТеста.ТекущаяСтраница=Элементыформы.ПанельТеста.Страницы.Найти("СтраницаРезультат");
		
	Исключение
	    СообщитьОбОшибке(ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры













